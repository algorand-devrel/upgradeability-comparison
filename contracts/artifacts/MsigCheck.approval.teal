#pragma version 9

// This TEAL was generated by TEALScript v0.47.0
// https://github.com/algorand-devrel/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_UpdateApplication

NOT_IMPLEMENTED:
	err

// createApplication(address[5],uint64)void
abi_route_createApplication:
	// participants: address[5]
	txna ApplicationArgs 2

	// version: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(address[5],uint64)void
	callsub createApplication
	int 1
	return

createApplication:
	proto 2 0

	// contracts/msig-check.algo.ts:11
	// assert(sha512_256(
	//       'MultisigAddr'
	//       + extract3(itob(version), 7, 1)
	//       + extract3(itob(3), 7, 1)
	//       + rawBytes(participants[0])
	//       + rawBytes(participants[1])
	//       + rawBytes(participants[2])
	//       + rawBytes(participants[3])
	//       + rawBytes(participants[4]),
	//     ) === castBytes<byte[32]>(this.txn.sender))
	byte "MultisigAddr"
	frame_dig -1 // version: uint64
	itob
	int 7
	int 1
	extract3
	concat
	byte 0x0000000000000003
	int 7
	int 1
	extract3
	concat
	frame_dig -2 // participants: address[5]
	extract 0 32
	concat
	frame_dig -2 // participants: address[5]
	extract 32 32
	concat
	frame_dig -2 // participants: address[5]
	extract 64 32
	concat
	frame_dig -2 // participants: address[5]
	extract 96 32
	concat
	frame_dig -2 // participants: address[5]
	extract 128 32
	concat
	sha512_256
	txn Sender
	==
	assert
	retsub

// updateApplication()void
abi_route_updateApplication:
	// execute updateApplication()void
	callsub updateApplication
	int 1
	return

updateApplication:
	proto 0 0

	// contracts/msig-check.algo.ts:24
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert
	retsub

create_NoOp:
	method "createApplication(uint64,address[5])void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_UpdateApplication:
	method "updateApplication()void"
	txna ApplicationArgs 0
	match abi_route_updateApplication
	err